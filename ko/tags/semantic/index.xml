<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>semantic on NoizBuster</title>
    <link>https://blog.noizbuster.com/ko/tags/semantic/</link>
    <description>Recent content in semantic on NoizBuster</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 16 Jan 2017 15:17:31 +0000</lastBuildDate><atom:link href="https://blog.noizbuster.com/ko/tags/semantic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>근래 소프트웨어 운용방법상 시맨틱 버저닝에 대한 의문</title>
      <link>https://blog.noizbuster.com/ko/posts/2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software/</link>
      <pubDate>Mon, 16 Jan 2017 15:17:31 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software/</guid>
      <description>Introduction 근래 가장 많이 사용되는 버저닝 방법론으로 semantic versioning 을 이야기 했을때 반대하는 사람은 그리 많지 않을것이다. 매우 체계적이며 직관적이고 버전간 호환관계또한 알 수 있기 때문에 많은 프로젝트와 사람들에게 사랑받고 있는 방법이다.
하지만 근래에 개발을 해오면서 느끼는 몇가지 한계점이 있고, 이를 어떻게 극복해 볼것인가에 대한 가벼운 고찰을 해보겠다.
Limitation of semantic versioning  Dynamic 하게 변하는 프로젝트에서 major 버전이 너무 빠르게 올라간다. 변화가 많은 초창기 프로젝트의 버저닝이 곤란하다.  최근 공분을 산 angular4 버전 계획 발표도 비슷한 문제라고 본다.</description>
    </item>
    
  </channel>
</rss>

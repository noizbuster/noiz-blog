<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>micro service architecture on NoizBuster</title>
    <link>https://blog.noizbuster.com/ko/tags/micro-service-architecture/</link>
    <description>Recent content in micro service architecture on NoizBuster</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 31 Oct 2016 11:22:49 +0000</lastBuildDate><atom:link href="https://blog.noizbuster.com/ko/tags/micro-service-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>authentication-on-msa</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-10-31-112249-authentication-on-msa/</link>
      <pubDate>Mon, 31 Oct 2016 11:22:49 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-10-31-112249-authentication-on-msa/</guid>
      <description>목표 Micro Service Architecture(MSA) 에 부합하게 Authentication 을 전담하는 서비스를 분리하고 구현하는것을 목표로 한다.
현재의 상황 현재 API Gateway 에서 MongoDB 에 저장된 User, Permissions, User Group, Permission Group 에 접근하여 권한이나 조직관리를 할 수 있게 구현되어있다.
나중에 여러가지
References  http://nordicapis.com/how-to-control-user-identity-within-microservices/ https://www.quora.com/How-do-I-handle-authentication-in-a-microservices-architecture-with-the-front-end-decoupled-too  </description>
    </item>
    
    <item>
      <title>actionhero로 API Gateway 구축하기</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-05-17-actionhero-api-gateway-worklog/</link>
      <pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-05-17-actionhero-api-gateway-worklog/</guid>
      <description>서론 라이선스 문제 때문에 LoopBack이 거슬려서 찾아보니 Action Hero 라는걸 찾았다.
http://www.actionherojs.com/
일단 기본적으로 나에게 필요한 기능은 다 있는것처럼 보인다.
 Reusability Scalability(Clustering) RestfulAPI  얘는 독특하게 Web, WebSocket 뿐만 아니라 Socket 도 지원을 한다.
npm install actionhero ./node_modules/.bin/actionhero generate npm install npm start 이렇게 설치하고 초기화하고 시작할 수 있다.</description>
    </item>
    
    <item>
      <title>loopback으로 API Gateway 구축하기</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-05-16-loopback-api-gateway-worklog/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-05-16-loopback-api-gateway-worklog/</guid>
      <description>서론 Micro Service Architecture 에 대해서는 다음 링크에 조대협님이 쉽게 잘 설명해주셨다.
조대협의 블로그 - 마이크로 서비스 아키텍쳐 (MSA의 이해)
이번 포스팅에서는 Loopback을 사용할것이다.
Loopback 은 IBM의 자회사인 StrongLoop가 만든 API Gateway 미들웨어이다
Loopback.io 에서 문서들과 예제들을 확인 할 수 있다.
설치와 초기 세팅 sudo npm install -g strongloop 설치가 끝나면 프로젝트 디렉토리를 하나 만들고 slc loopback 명령어로 프로젝트를 생성한다.
mkdir project-name cd project-name slc loopback 그러면 yeoman이 트리거되고 설치가 시작된다.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2015 ~ 2016 ROS 스터디 on NoizBuster</title>
    <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/</link>
    <description>Recent content in 2015 ~ 2016 ROS 스터디 on NoizBuster</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 15 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.noizbuster.com/ko/serial/2015-ros-study/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kobuki(거북이) 라즈베리파이2랑 연결하기</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-15-kobuki-raspberripi2/</link>
      <pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-15-kobuki-raspberripi2/</guid>
      <description>꼬부기에 쓰기위한 코어로 집에 있는 라즈베리파이2를 사용하기로 했다.
전력도 외장 배터리를 사용하면 한참 쓸 수 있기 때문에 적절할것이다고 생각했음.
게다가 설정 끝나면 USB전력 하나만 들어가도 USB무선랜으로 SSH 물려서 쓸 수 있으니 선이 주렁주렁 달려있는것도 피할 수 있음.
2니까 어느정도 연산력도 있지 않을까 기대해본다.
ROS wiki에 raspberry pi 에 indigo 를 설치하는 항목 을 참고하여 진행함.
대부분 비슷하겠지만 중간중간 다른곳이 있음.
준비물 - Raspbian Jessie image - 16GB SD-CARD - Raspberry pi 2</description>
    </item>
    
    <item>
      <title>ROS Study 007. Using rqt_console and roslaunch</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-04-ros-7-using_rqtconsole_and_roslaunch/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-04-ros-7-using_rqtconsole_and_roslaunch/</guid>
      <description>Prerequisites rqt and turtlesim package sudo apt-get install ros-&amp;lt;distro&amp;gt;-rqt ros-&amp;lt;distro&amp;gt;-rqt-common-plugins ros-&amp;lt;distro&amp;gt;-turtlesim rqt_console &amp;amp; rqt_logger_level
rqt_console 은 ROS의 로깅 프레임워크에 붙어서 노드들이 내는 출력들을 보게 한다.
rosrun rqt_console rqt_console 로 실행한다.
rqt_logger_level은 debug, info, warning 등의 로깅 레벨을 정할 수 있게 해준다.
rosrun rqt_logger_level rqt_logger_level로 실행한다.
Using roslaunch
roslaunch 는 정해진 설정대로 여러개의 노드를 한번에 실행 시켜주는것이다. 하나의 프로젝트를 통채로 실행할때 좋다.
&amp;lt;launch&amp;gt; &amp;lt;group ns=&amp;#34;turtlesim1&amp;#34;&amp;gt; &amp;lt;node pkg=&amp;#34;turtlesim&amp;#34; name=&amp;#34;sim&amp;#34; type=&amp;#34;turtlesim_node&amp;#34;/&amp;gt; &amp;lt;/group&amp;gt; &amp;lt;group ns=&amp;#34;turtlesim2&amp;#34;&amp;gt; &amp;lt;node pkg=&amp;#34;turtlesim&amp;#34; name=&amp;#34;sim&amp;#34; type=&amp;#34;turtlesim_node&amp;#34;/&amp;gt; &amp;lt;/group&amp;gt; &amp;lt;node pkg=&amp;#34;turtlesim&amp;#34; name=&amp;#34;mimic&amp;#34; type=&amp;#34;mimic&amp;#34;&amp;gt; &amp;lt;remap from=&amp;#34;input&amp;#34; to=&amp;#34;turtlesim1/turtle1&amp;#34;/&amp;gt; &amp;lt;remap from=&amp;#34;output&amp;#34; to=&amp;#34;turtlesim2/turtle1&amp;#34;/&amp;gt; &amp;lt;/node&amp;gt; &amp;lt;/launch&amp;gt; 이런식으로 구성된다.</description>
    </item>
    
    <item>
      <title>ROS Study 008. Using rosed to edit files in ROS</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-04-ros-8-using_rosed/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-04-ros-8-using_rosed/</guid>
      <description>msg 와 srv 에 대한 설명
msg: msg 파일은 로스 메세지의 필드에 대해 설명된 간단한 파일이다. 그것들은 서로 다른 언어로 메세지를 생성하기위해서 사용된다.
srv: srv 파일은 서비스에 대해서 설명된 파일이다. 이것은 두개의 부분으로 구성된다:리퀘스트, 리스폰스
msg 파일은 패키지에서 msg 디렉토리에 저장된다.
그리고 srv 파일은 srv디렉토리에 저장된다.
msg 파일은 간단한 텍스트파일이다 필트 타입과 필드네임을 각각 줄에 포함한. 필드 타입들은 다음과 같은게 될 수 있다. - int8, int16, int32, int64 (plus uint*) - float32, float64 - string - time, duration - other msg files - variable-length array[] and fixed-length array[C]</description>
    </item>
    
    <item>
      <title>ROS Study 009. Creating a ROS msg and srv</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-04-ros-9-creating_msg_and_srv/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-04-ros-9-creating_msg_and_srv/</guid>
      <description>rosed
rosed 는 rosbash의 일부분이다.
이 명령어는 패키지명과 파일명으로 바로 파일을 편집 할 수 있도록 해준다.
rosed roscpp Logger.msg 로 사용하면 roscpp 패키지 내부의 Logger.msg 파일을 바로 에디터로 열어준다.
역시 탭 컴플리션을 지원하기 때문에 rosed roscpp 상태에서 탭을 두번치면 내부의 파일을 보여준다.
에디터를 바꾸고싶으면
- nano : export EDITOR=&#39;nano -w&#39; - vim : export EDITOR=&#39;vim -w&#39; - emacs : export EDITOR=&#39;emacs -nw&#39;</description>
    </item>
    
    <item>
      <title>ROS Study 017. Recording and playing back data</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-04-ros-17-record_and_playback_data/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-04-ros-17-record_and_playback_data/</guid>
      <description>Description: This tutorial will teach you how to record data from a running ROS system into a .bag file, and then to play back the data to produce similar behavior in a running system.
Keywords: data, rosbag, record, play, info, bag
Tutorial Level: BEGINNER
Next Tutorial: Getting started with roswtf
차례 Recording data (creating a bag file) Recording all published topics Examining and playing the bag file Recording a subset of the data The limitations of rosbag record/play</description>
    </item>
    
    <item>
      <title>ROS Study 004. ros node</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-03-ros-4-node/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-03-ros-4-node/</guid>
      <description>####본 내용은 개념적인것임으로 기존에 설명된 자료들을 이야기 하고 넘어가도록 하겠다. 한국어로 설명된 카페의 내용이다. http://cafe.naver.com/openrt/2468 ####이하 내용은 wiki.ROS.org 에 게시된 튜토리얼을 대충 번역한것이다. http://wiki.ros.org/ROS/Tutorials/UnderstandingNodes
###사전작업
이 튜토리얼을 위해서 우리는 가벼운 시뮬레이터를 사용할것이다. $ sudo apt-get install ros-&amp;lt;distro&amp;gt;-ros-tutorials &amp;lt;distro&amp;gt;부분을 당신이 사용하는 배포판으로 대체해서 사용하면 된다.(e.g. hydro, groovy, electric, fuerte etc.)
###그래프컨셉을 빠르게 리뷰하기
 Nodes: 노드는 ROS를 이용해서 실행가능한것이고 ㅇ다른 노트들과 대화(통신)할 수 있는것이다. Messages: 토픽(Topic)을 구독(subscribing) 하거나 발행(publishing)할때 사용되는 ROS 데이터 타입 Topics: 노드는 토픽에 대한 메세지를 발행 할 수 있을 뿐만 아니라 구독 해서 메세지를 받을 수도 있다.</description>
    </item>
    
    <item>
      <title>ROS Study 005. Topics</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-03-ros-5-topic/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-03-ros-5-topic/</guid>
      <description>###토픽
 rostopic echo [토픽이름] 토픽에서 주고 받는 내용 출력 rostopic list 현재 활성화된 토픽들의 리스트를 본다. rostopic pub [토픽] [메세지타입] [데이터] 해당토픽에 메세지를 발행한다. rosrun rqt_graph rqt_graph 현재 노드들과 토픽들에 대해서 그래프를 그려준다. rostopic type /turtle1/cmd_vel | rosmsg show 해당 채널의 메세지의 타입과 내용을 보여준다. rostopic hz /turtle1/pose 메세지의 데이터 레이트를 보여준다. rosrun rqt_plot rqt_plot 특정 메세지의 특정값이 시간에 따라 어떻게 변하는지 그래프로 그려줌  </description>
    </item>
    
    <item>
      <title>ROS Study 006. Services and Parameters</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-03-ros-6-service-and-parameter/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2016-01-03-ros-6-service-and-parameter/</guid>
      <description>###서비스 토픽은 발행자가 중단하지 않는이상 지속적으로 메세지를 주고받는다.
하지만 서비스는 일회성으로 연결 - 서비스요청 - 서비스응답 - 하고 닫는다.
다시 통신하려면 연결부터 시작해야한다.
rosservice - rosservice call [service] [args] 서비스를 아규먼트와 함께 요청한다. - rosservice call /clear 를 실행시키면 거북이가 다닌 경로가 지워진다. - rosservice type spawn| rossrv show 이런식으로 하면 서비스가 가진 타입과 내용물이 보인다.
- rosservice call spawn 2 2 0.2 &amp;quot;&amp;quot; 알게된 내용으로 콜 할 수 있다.</description>
    </item>
    
    <item>
      <title>ROS Study 003. Create the Package</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2015-12-30-ros-3-create-package/</link>
      <pubDate>Wed, 30 Dec 2015 00:06:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2015-12-30-ros-3-create-package/</guid>
      <description>패키지 만들기
ros 패키지를 만드는 방법은 2가지가 있다.
 roscreate-pkg를 사용한다.  groovy 기반의 이전에 쓰던 방법  catkin을 사용한다  Fuerte 이후 버전에서 사용 할 수 있는 최신의 방법   Catkin으로 워크스페이스 만들기
 Workspace 디렉토리 생성 catkin_init_workspace로 Workspace 초기화 catkin_make를 해서 빌드 만약 이 Workspace의 경로를 $ROS_PACKAGE_PATH에 추가 하고 싶으면 source devel/setup.bash 를 하면 된다.  Workspace에는 여러개의 Package가 포함 될 수 있다.
workspace_folder/ -- WORKSPACE src/ -- SOURCE SPACE CMakeLists.</description>
    </item>
    
    <item>
      <title>ROS Study 002. Navigating The Filesystem</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2015-12-29-ros-2-navigating-the-filesystem/</link>
      <pubDate>Tue, 29 Dec 2015 00:06:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2015-12-29-ros-2-navigating-the-filesystem/</guid>
      <description>튜토리얼을 위해서 튜토리얼 패키지 설치
sudo apt-get install ros-&amp;lt;distro&amp;gt;-ros-tutorials ROS의 파일 시스템 컨셉
ROS의 파일 시스템 컨셉은 Package와 Manifest로 이루어져있다.
 Package는 로스코드의 소프트웨어 구성 단위이고 각각의 패키지는 라이브러리, 실행파일, 스크립트 혹은 다른 아티팩트들을 포함할 수 있다. Manifest는 패키지의 다른 패키지와의 의존성, 버전, 관리자, 라이선스 등을 포함하는 메타데이터를 제공하는 패키지에 대한 설명이다.  실습
ROS의 패키지를 관리하고 탐색하는데 사용되는 명령어들 * rospack : ROS의 패키지관리 툴 * roscd : ROS의 Package 경로로 이동 * rosls : ROS의 Package 경로 내부의 파일을 확인</description>
    </item>
    
    <item>
      <title>ROS Study 001. Installing and Configuring Your ROS Environment</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2015-12-28-ros-1-installation-and-configulation/</link>
      <pubDate>Mon, 28 Dec 2015 00:06:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2015-12-28-ros-1-installation-and-configulation/</guid>
      <description>ROS 개발환경 설정  우분투 14.04 LTS IDE : VIM  http://wiki.ros.org/action/login/IDEs#Vim  ROS : JADE Turtle  Ubuntu Setup 1. 우분투 14.04를 VM에 설치함 2. 내 입맛대로 초기 세팅 sudo apt-get remove unity-webapps-common #우분투 웹검색 삭제 sudo apt-get install vim #VIM 설치 sudo apt-get install git #Git 설치 3. ROS 설치 #현재 최신 패키지 리스트 팻칭 sudo sh -c &amp;#39;echo &amp;#34;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&amp;#34; &amp;gt; /etc/apt/sources.list.d/ros-latest.list&amp;#39; #인증 키 발급 sudo apt-key adv --keyserver hkp://pool.</description>
    </item>
    
    <item>
      <title>VS 프로젝트 공유시 제외해야할 파일들</title>
      <link>https://blog.noizbuster.com/ko/serial/2015-ros-study/2015-08-11-vs-metafile/</link>
      <pubDate>Mon, 14 Dec 2015 00:06:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/serial/2015-ros-study/2015-08-11-vs-metafile/</guid>
      <description> git이나 svn으로 혹은 어딘가에 제출할때 IDE 의 메타데이터나 로컬 설정파일들은 제외하는것이 좋다.
특히 VS의 경우 이런 메타데이터들의 크기가 크니 삭제하면 이래저래 많은 도움이 된다.
공통으로 삭제해야 할 파일들  Debug 디렉토리 (솔루션, 프로젝트 경로상 모두) Release 디렉토리 (솔루션, 프로젝트 경로상 모두) .suo - 작업내역, 탭이나 창 위치정보가 저장됨 .user - 사용자별 설정내역이 저장됨  VS 버전마다 다른경우  ipch 디렉토리 .sdf .ncb 파일  </description>
    </item>
    
  </channel>
</rss>
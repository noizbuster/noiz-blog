<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>기술 on NoizBuster</title>
    <link>https://blog.noizbuster.com/ko/posts/</link>
    <description>Recent content in 기술 on NoizBuster</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 18 Feb 2021 05:46:07 +0000</lastBuildDate><atom:link href="https://blog.noizbuster.com/ko/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Billboardjs With React</title>
      <link>https://blog.noizbuster.com/ko/posts/2021-02-18-054607-billboardjs-with-react/</link>
      <pubDate>Thu, 18 Feb 2021 05:46:07 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2021-02-18-054607-billboardjs-with-react/</guid>
      <description>Billboard.js with React React.js 앱에 차트 표현을 위해 Billboard.js 를 사용하는방법을 간단하게 알아보고
사용해보면서 겪은 시행착오나 느낌에 대해 이야기 해보려고 합니다.
이 포스팅에서 작성된 예제코드는 Github repo 에서 확인 할 수 있습니다.
Environment  Ubuntu 18.04 node.js v14.x (LTS) react.js v17.x  How to Prerequisites  node.js react.js  준비 및 설정 프로젝트 준비  이미 사용하고 있는 프로젝트가 있다면 생략하셔도 됩니다.
 npx create-react-app billboard-with-react 의존성 설치 npm install --save billboard.</description>
    </item>
    
    <item>
      <title>개발보조 목적의 Minikube 설치 및 설정</title>
      <link>https://blog.noizbuster.com/ko/posts/2020-10-27-123532-installing-minikube/</link>
      <pubDate>Tue, 27 Oct 2020 12:35:32 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2020-10-27-123532-installing-minikube/</guid>
      <description>Minikube 로컬환경에서 kubernetes 환경을 간단하게 세팅해서 개발에 활용 할 수 있는 minikube 의 설치방법에 대해 짧게 다뤄보도록 하겠다.
Minikube Installation Guide
1. install curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb sudo dpkg -i minikube_latest_amd64.deb minikube start 2. configuration alias kubectl=&amp;quot;minikube kubectl --&amp;quot; 를 bashrc 나 zshrc 등 사용하는 쉘에 alias 로 추가
source ~/.zshrc 로 로드하거나 새 터미널을 열고
kubectl get po -A 로 동작 확인</description>
    </item>
    
    <item>
      <title>Ubuntu Mouse Wheel in Vmware</title>
      <link>https://blog.noizbuster.com/ko/posts/2020-10-27-082234-ubuntu-mouse-wheel-in-vmware/</link>
      <pubDate>Tue, 27 Oct 2020 08:22:34 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2020-10-27-082234-ubuntu-mouse-wheel-in-vmware/</guid>
      <description>문제? 불가피하게 게임기에서 리눅스를 써야할일이 있을때 virtual box 를 이용해서 우분투를 계속 써왔는데 여러개 모니터를 사용하거나 할때 vram 도 부족하고 마우스가 오작동하는등의 어려움이 있어서 이번에 vmware 를 사용해보기로 했다.
player 만해도 퍼포먼스가 정말 좋아서 맘에 들었는데.
마우스 조작과 관련해서 맘에 안드는게 너무 많았다.
 마우스의 앞으로, 뒤로 버튼이 동작하지 않음 마우스의 휠이 이상하게 동작함 (위아래로 점프한다거나 하는등 신호가 덜 들어가는 느낌?)  이 문제를 해결하기위해 약 이틀정도 삽질을 해서 해결했다.</description>
    </item>
    
    <item>
      <title>Cannot Use Fcitx in Jetbrains IDE</title>
      <link>https://blog.noizbuster.com/ko/posts/2020-01-21-050835-cannot-use-fcitx-in-jetbrains-ide/</link>
      <pubDate>Tue, 21 Jan 2020 05:08:37 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2020-01-21-050835-cannot-use-fcitx-in-jetbrains-ide/</guid>
      <description>Ubuntu 에서 IDEA 에서 Fcitx 가 사용 불가능한 문제 해결 WebStorm, Intellij, PyCharm 등 IDEA Jetbrains 의 IDE 가 업데이트 되면서 Fcitx 를 사용 할 수 없는 문제가 있다.
아마도 IDEA가 자신을 실행하기위해 가지고 있는 jdk 가 11버전을 하는데 이것이 바뀌면서 input method 를 자동으로 disable 시키는것으로 보인다. 그래서 IDEA 클라이언트를 돌리는 JVM에 해당기능을 비활성화 해주는 옵션을 주는게 해결 하기위한 아이디어다.
문제 재현 환경  Ubuntu 18.04 Jetbrains IDEA 2019.3.1  WebStorm, Intellij, PyCharm 등 모두 문제 발생   fcitx 4.</description>
    </item>
    
    <item>
      <title>Kotlin Jvm Library</title>
      <link>https://blog.noizbuster.com/ko/posts/2020-01-09-065408-kotlin-jvm-library/</link>
      <pubDate>Thu, 09 Jan 2020 06:54:09 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2020-01-09-065408-kotlin-jvm-library/</guid>
      <description>Kotlin 으로 JVM Library 만들기
1. Gradle 로 Kotlin 프로젝트 생성 mkdir kotlin-jvm-lib cd kotlin-jvm-lib gradle init Welcome to Gradle 6.0.1! Here are the highlights of this release: - Substantial improvements in dependency management, including - Publishing Gradle Module Metadata in addition to pom.xml - Advanced control of transitive versions - Support for optional features and dependencies - Rules to tweak published metadata - Support for Java 13 - Faster incremental Java and Groovy compilation - New Zinc compiler for Scala - VS2019 support - Support for Gradle Enterprise plugin 3.</description>
    </item>
    
    <item>
      <title>Install Java With Version Manager</title>
      <link>https://blog.noizbuster.com/ko/posts/2019-08-10-064434-install-java-with-version-manager/</link>
      <pubDate>Sat, 10 Aug 2019 06:44:34 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2019-08-10-064434-install-java-with-version-manager/</guid>
      <description>왜 Version Manager 가 필요한가? Ruby 의 RVM, Node.js 의 NVM 을 사용했을때 의 경험이 매우 좋았습니다.
다른 버전의 실행환경에서 미리 테스트도 할 수 있었고 새 버전으로 넘어갈때 훌륭한 백업 플랜을 제공해주기도 했으니까요.
무엇보다도 개발환경을 큰 시간을 들여서 매번 갈아엎을 필요가 없다는것이 가장 큰 매력이었습니다.
왜 이제와서? 제가 JAVA 를 주로 쓸적에는 (주로 Android 프로젝트를 많이 했습니다.) Windows 나 Linux 에 Oracle JDK 를 깔아서 기본 설정된 PATH를 중심으로 사용했었습니다. 이제와서 JAVA 프로젝트를 다시 해볼까 싶어서 보니 OpenJDK 로 넘어가려고 하는 분위기를 풍기는 사람도 있고, 최신버전을 미리 써보니 좋더라 라는 분들도 보였습니다.</description>
    </item>
    
    <item>
      <title>ESM? CJS? In NodeJS</title>
      <link>https://blog.noizbuster.com/ko/posts/2019-01-09-135737-esm-on-nodejs/</link>
      <pubDate>Wed, 09 Jan 2019 13:57:37 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2019-01-09-135737-esm-on-nodejs/</guid>
      <description>동기 EcmaScrit Module 가 explorer 를 제외한 메이저 브라우저에서 모두 지원이 되는 마당에 코드 재활용성 문제도 있고 해서 ESM 스타일로 일부 코드가 작성되었을 경우 nodejs 프로젝트에서도 사용하고 싶게 되었다.
물론 nodejs 의 고유기능들을 사용하려면 (package.js관련된것이나, 배터리 패키지들) ESM 스타일로 코드를 짠들 브라우저 호환성을 보장 할 수 없지만 전체 코드베이스에서 이런 디펜던시를 가지는 파일들이 몇개나 되는지 생각해보면 적용 할 가치는 충분하다고 생각하고, 시간이 지날수록 더욱 중요해 질것이라고 기대한다.
javascript 호환성 관련 자료  https://www.</description>
    </item>
    
    <item>
      <title>js-documentation</title>
      <link>https://blog.noizbuster.com/ko/posts/2018-11-19-161357-js-documentation/</link>
      <pubDate>Mon, 19 Nov 2018 16:13:57 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2018-11-19-161357-js-documentation/</guid>
      <description>도큐먼트 제네레이션을 하려고 하는데 고민이 많았다. 타입스크립트 쓰면 typedoc 이 대부분 해결 해 주니까 별 문제가 없지만. ES7 를 쓰고있는 프로젝트들은 esdoc 이나 jsdoc 를 끼고 갈 수 밖에 없다.
내 요구조건은 다음과 같았다.
 충분히 유명한 패키지일것 typedef 에서 @extends 혹은 @augments 를 사용 할 수 있을것. document coverage  결론부터 말하자면 document coverage 를 포기하고 커스텀 플러그인을 달아서 jsdoc 를 사용하기로 했다.
시도해본것들은 다음과 같다.
  JSDoc</description>
    </item>
    
    <item>
      <title>errorhandling-async-express-router</title>
      <link>https://blog.noizbuster.com/ko/posts/2018-08-23-162836-errorhandling-async-express-router/</link>
      <pubDate>Thu, 23 Aug 2018 16:28:36 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2018-08-23-162836-errorhandling-async-express-router/</guid>
      <description>Error Handling On Express 나는 Express API 를 만들때 글로벌 트랩을 만들어서 UnHandled Exception 을 처리하는 방법을 즐겨쓴다.
// Global Error Handler app.use(function (err, req, res, next) { let status = err.status || 500; let extra = err.extra || {}; l.e(&amp;#39;Unhandled Error&amp;#39;, err); let resBody = {message: err.message, extra: extra, details: err}; if (process.env.NODE_ENV === &amp;#39;production&amp;#39;) { return res.status(status).json({message: &amp;#39;internal error&amp;#39;}); } else { return res.status(status).json(resBody) } }); Synchronous 핸드러를 썼을때는 잘 동작했겠지만 async function 을 쓰면서 부터는 throw 되는 에러들이 express 를 타지 못하는 문제가 있다.</description>
    </item>
    
    <item>
      <title>nodejs 에서 Cron 사용하기</title>
      <link>https://blog.noizbuster.com/ko/posts/2018-03-30-180144-cron-on-nodejs/</link>
      <pubDate>Fri, 30 Mar 2018 18:01:44 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2018-03-30-180144-cron-on-nodejs/</guid>
      <description>cron 이 무엇이고 어떻게 사용해야 하나? https://en.wikipedia.org/wiki/Cron https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm
유용한 WebTool들 호출이 되는시점을 확인 할때: http://cron.schlitt.info/ Cron 표현식의 유효성 검사 https://crontab.guru/
NodeJS 프로젝트에서 내가 선택한 패키지 Cron 표현식 파싱, 다음 실행시점 계산 https://github.com/harrisiirak/cron-parser
긴 기간동안 실행되어야 하는 timeout 을 위한 패키지 https://github.com/tellnes/long-timeout</description>
    </item>
    
    <item>
      <title>survey-nodejs-config-package</title>
      <link>https://blog.noizbuster.com/ko/posts/2018-03-12-145933-survey-nodejs-config-package/</link>
      <pubDate>Mon, 12 Mar 2018 14:59:33 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2018-03-12-145933-survey-nodejs-config-package/</guid>
      <description>Motivation nodejs 프로젝트를 하면서 build stream 이나 configuration 의 default 를 관리해야 할 일이 많다. 프로젝트들이 복잡해짐에 따라 다양한 요구조건들이 생기는데 내가 써본 라이브러리들이 이런 문제를 다 커버하지 못하는 문제가 있다. 내가 경험했던 패키지들의 특징과 장단점을 비교해보겠다.
What I Need  배포는 docker 로 이루어 지기 때문에 config 디렉토리가 통째로 빈 디렉토리로 덮어씌워질 수 있다. (docker data volume 은 file 단위의 mount 를 지원하지 않는다.) 하지만 유저가 편집하는데 참고가 되기 위해 default 파일이 필요에 의해 재생되어야 한다 개발편의상 environment variable (NODE_ENV) 에 따라 참조하는 configuration 파일이 달라져야 한다.</description>
    </item>
    
    <item>
      <title>another-webapp-in-angulario</title>
      <link>https://blog.noizbuster.com/ko/posts/2018-03-07-144906-another-webapp-in-angulario/</link>
      <pubDate>Wed, 07 Mar 2018 14:49:06 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2018-03-07-144906-another-webapp-in-angulario/</guid>
      <description>Goal 일을 하면서, 혹은 내 서브 프로젝트를 하면서 만들게 될 헤테로지니어스한 웹앱들을 한군데서 서비스(적어도네비게이팅) 을 하고 싶었다.
지금 당장 제일 손에 익은 툴이 angular.io (angular2 &amp;gt; ) 이기 때문에 이것으로 Navbar 를 비롯탄 일종의 플랫폼? 을 만들고 개별적으로 떠있는 웹 서비스들을 이 안에서 보여주는것을 목표로 잡았다.
Using Angular Router? 원래 내가 하고 싶었던것은 angular route 가 제어하는 route-outlet 에다가 다른 웹앱을 뿌리는것이었다. 헌데 검색을 해보니 그리 만만치 않다는것을 알게 되었다. 적어도 이렇게 하려면 angular.</description>
    </item>
    
    <item>
      <title>http2-header-naming-convention</title>
      <link>https://blog.noizbuster.com/ko/posts/2018-03-07-144151-http2-header-naming-convention/</link>
      <pubDate>Wed, 07 Mar 2018 14:41:51 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2018-03-07-144151-http2-header-naming-convention/</guid>
      <description>HTTP/2 Header Naming Convention server 코딩을 하는중에 header 를 다 lower case 로 자동변환 시켜주는짓을 API 게이트웨이 서버 미들웨어가 하는것을 발견했다.
뭔가 이유가 있을것 같아 검색을 해보니 HTTP/2 스펙에서 header 이름을 lowerCase로 변환해줘야한다(MUST) 라고 표현하고 있다는걸 알게 되었다.
HTTP/2 의 사용처가 점점 많아질것이니까 지금부터 미리미리 대비를 해야겠다.
다른 서비스에서도 lowerCase로 변경해서 내부적으로 처리하도록 하던가 헬퍼 미들웨어를 만들던가 해야지
References  발견한 stackoverflow 스레드 Secrion 8.1.2 of rfc7540  </description>
    </item>
    
    <item>
      <title>my-job-philosophy</title>
      <link>https://blog.noizbuster.com/ko/posts/2017-09-04-093944-my-job-philosophy/</link>
      <pubDate>Mon, 04 Sep 2017 09:39:44 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2017-09-04-093944-my-job-philosophy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>market-research-hansung-laptop-20170710</title>
      <link>https://blog.noizbuster.com/ko/posts/2017-07-25-105709-market-research-hansung-laptop-20170710/</link>
      <pubDate>Tue, 25 Jul 2017 10:57:09 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2017-07-25-105709-market-research-hansung-laptop-20170710/</guid>
      <description></description>
    </item>
    
    <item>
      <title>gmail-filtering</title>
      <link>https://blog.noizbuster.com/ko/posts/2017-07-13-131835-gmail-filtering/</link>
      <pubDate>Thu, 13 Jul 2017 13:18:35 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2017-07-13-131835-gmail-filtering/</guid>
      <description>Attachment related e.g. larger:5m older_than:5y
size:5m searches for attachments of 5MB
larger:5m searches for attachments of 5MB and larger
smaller:5m searches for attachments smaller than 5MB
Label related not labeled email has:nouserlabels
it query also sent mail
if not want to see sent mail
-label:sent
and also chat log
-label:chats</description>
    </item>
    
    <item>
      <title>elements-of-project</title>
      <link>https://blog.noizbuster.com/ko/posts/2017-07-13-104204-elements-of-project/</link>
      <pubDate>Thu, 13 Jul 2017 10:42:04 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2017-07-13-104204-elements-of-project/</guid>
      <description>프로젝트 구성요소
 Development Environment  IDE Version Coding Convention SCM   CI (Integrate Test) CD  docker   Code Coverage (Unit Test) Documentation  Guide for Contributers API Specification How to Use   Issue Tracker Resource Negotiation  Port    </description>
    </item>
    
    <item>
      <title>authentication-on-angulario</title>
      <link>https://blog.noizbuster.com/ko/posts/2017-06-05-141344-authentication-on-angulario/</link>
      <pubDate>Mon, 05 Jun 2017 14:13:44 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2017-06-05-141344-authentication-on-angulario/</guid>
      <description>참고 문서
 https://auth0.com/blog/angular-2-authentication/ https://blog.thoughtram.io/angular/2016/07/18/guards-in-angular-2.html https://medium.com/@blacksonic86/angular-2-authentication-revisited-611bf7373bf9 https://medium.com/@ladyleet/popups-modals-and-navigation-using-angular-material-2-components-in-your-angular-2-project-faf510dbcdee http://4dev.tech/2016/03/login-screen-and-authentication-with-angular2/ https://stackoverflow.com/questions/34464108/angular2-set-headers-for-every-request  </description>
    </item>
    
    <item>
      <title>근래 소프트웨어 운용방법상 시맨틱 버저닝에 대한 의문</title>
      <link>https://blog.noizbuster.com/ko/posts/2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software/</link>
      <pubDate>Mon, 16 Jan 2017 15:17:31 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software/</guid>
      <description>Introduction 근래 가장 많이 사용되는 버저닝 방법론으로 semantic versioning 을 이야기 했을때 반대하는 사람은 그리 많지 않을것이다. 매우 체계적이며 직관적이고 버전간 호환관계또한 알 수 있기 때문에 많은 프로젝트와 사람들에게 사랑받고 있는 방법이다.
하지만 근래에 개발을 해오면서 느끼는 몇가지 한계점이 있고, 이를 어떻게 극복해 볼것인가에 대한 가벼운 고찰을 해보겠다.
Limitation of semantic versioning  Dynamic 하게 변하는 프로젝트에서 major 버전이 너무 빠르게 올라간다. 변화가 많은 초창기 프로젝트의 버저닝이 곤란하다.  최근 공분을 산 angular4 버전 계획 발표도 비슷한 문제라고 본다.</description>
    </item>
    
    <item>
      <title>fixing-atom-and-idea-file-refresh-issue</title>
      <link>https://blog.noizbuster.com/ko/posts/2017-01-09-140517-fixing-atom-and-idea-file-refresh-issue/</link>
      <pubDate>Mon, 09 Jan 2017 14:05:17 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2017-01-09-140517-fixing-atom-and-idea-file-refresh-issue/</guid>
      <description>Fixing limit of watch issue  sudo vi /etc/sysctl.d/max_user_watches.conf write fs.inotify.max_user_watches = 524288 the file sudo sysctl -p --system restart atom or idea  Reference  https://github.com/atom/atom/blob/master/docs/build-instructions/linux.md#typeerror-unable-to-watch-path https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit  </description>
    </item>
    
    <item>
      <title>survey-npm-yaml-lib</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-12-19-140419-survey-npm-yaml-lib/</link>
      <pubDate>Mon, 19 Dec 2016 14:04:19 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-12-19-140419-survey-npm-yaml-lib/</guid>
      <description>Surveyed 2016-12-19
  TL;DR : js-yaml Win  yaml-js License: WTFPL
2,580 downloads in the last day
34,263 downloads in the last week
169,836 downloads in the last month
js-yaml License: MIT
134,940 downloads in the last day
2,614,264 downloads in the last week
10,545,700 downloads in the last month
yamljs License: MIT
7,426 downloads in the last day
116,115 downloads in the last week
455,376 downloads in the last month</description>
    </item>
    
    <item>
      <title>redemption-monitor-design</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-11-27-174831-redemption-monitor-design/</link>
      <pubDate>Sun, 27 Nov 2016 17:48:31 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-11-27-174831-redemption-monitor-design/</guid>
      <description>Introduction 게임 서버를 만들었지만 개발자 혹은 운영자가 게임 서버나 내부의 상황을 보기 위해서 매번 REST client 를 이용하는것은 비현실적으로 불편하다.
때문에 서버 내부의 정보를 시각적으로 혹은, 미리짜여진 규격에 맞추어 관제 할 수 있는 방법이 필요했다.
그 수단으로 여러가지가 있겠지만 웹앱으로 만드는것이 제일 범용적이고 편할것이라고 판단하였다.
Design Features  기본적인 서버 상태 확인 (service discovery 와 연동) 게임서버내 맵 상황, 각종 통계 제공  Conditions 개발을 위한 개발을 피하기 위해 몇가지 조건이 수반된다.</description>
    </item>
    
    <item>
      <title>성전! SQL 테이블명</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-11-03-153952-holywar-about-table-name/</link>
      <pubDate>Thu, 03 Nov 2016 15:39:52 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-11-03-153952-holywar-about-table-name/</guid>
      <description>Introduction 디비랑은 별로 안친해서 디테일하게 네이밍 컨벤션 같은것에 대해 생각해본적이 없었다.
이번에 업무 관련해서 작명하다가 관례가 있을까 싶어 조사하던중 재미있는 discussion 들을 보게 되어 정리해보게 되었다.
ORM 이 미친짓을 한다? Mongoose 를 쓸적에 collection 이름을 정할때 단수형을 자꾸 복수형으로 바꾸길래 (e.g. user 를 users로 지가 바꾼다) {collection: &#39;user&#39;} 이런식으로 강제로 collection 의 이름을 정해주면서 스키마를 정의한적이 있었다.
마찬가지로 mariadb 를 사용하기위해 도입한 sequelize 도 똑같은짓을 하는데 얘는 mongoose 처럼 쉽게 테이블 이름을 정해주는것이 아니라</description>
    </item>
    
    <item>
      <title>Transaction on MongoDB</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-11-01-132517-mongodb-transaction/</link>
      <pubDate>Tue, 01 Nov 2016 13:25:17 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-11-01-132517-mongodb-transaction/</guid>
      <description>Introduction 서버 개발을 하는 도중 MongoDB의 서로 다른 Document 에 Atomic 하게 update 가 일어나야 하는 상황이 왔다. 서버는 Node로 되어있고 ORM은 mongoose 를 쓰고있다.
헌데 Mongoose 에는 consistency를 보장하면서 복수의 Document를 업데이트 하는 API가 구현되어있지 않은것으로 보여 이를 해결하고자 한다.
Transaction in MongoDB MongoDB 는 Optimistic concurrency control (OCC) 를 채용하고 있고 내부적으로 write lock을 건다고 한다. 때문에 한개 Collection (=table in RDB) 내 에서의 consistency 는 보장이 된다.</description>
    </item>
    
    <item>
      <title>authentication-on-msa</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-10-31-112249-authentication-on-msa/</link>
      <pubDate>Mon, 31 Oct 2016 11:22:49 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-10-31-112249-authentication-on-msa/</guid>
      <description>목표 Micro Service Architecture(MSA) 에 부합하게 Authentication 을 전담하는 서비스를 분리하고 구현하는것을 목표로 한다.
현재의 상황 현재 API Gateway 에서 MongoDB 에 저장된 User, Permissions, User Group, Permission Group 에 접근하여 권한이나 조직관리를 할 수 있게 구현되어있다.
나중에 여러가지
References  http://nordicapis.com/how-to-control-user-identity-within-microservices/ https://www.quora.com/How-do-I-handle-authentication-in-a-microservices-architecture-with-the-front-end-decoupled-too  </description>
    </item>
    
    <item>
      <title>Handling RESTful API Errors</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-09-08-102937-restful-api-error-handling/</link>
      <pubDate>Thu, 08 Sep 2016 10:29:37 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-09-08-102937-restful-api-error-handling/</guid>
      <description>서론 RESTful API를 설계하는데 몇가지 고민거리가 생겼다.
Authentication, Clustering, 같은건 구현상의 문제와는 별도로 System 내에서 사용되는 공통 스키마가 있어야 될것 같다.
지금 당장 필요하거나 상상되는것은
 Global Schema  Transaction ID  gtxid : Global Transaction ID ltxid : Local Transaction ID     Handling Errors Handling Deprecations  Survey  http://apigee.com/about/blog/technology/restful-api-design-what-about-errors 몇가지 비교 해놨음 https://developers.google.com/drive/v3/web/handle-errors 구글은 이렇게 함.  http://blog.restcase.com/rest-api-error-codes-101/   http://www.codingpedia.org/ama/error-handling-in-rest-api-with-jersey/ http://stackoverflow.com/questions/942951/rest-api-error-return-good-practices 구체적인 로직 다이어그램  Schema Design &amp;amp; Convention Common Schema  (optional) error  msg (optional) code (optional) link   (optional) deprecated  msg (optional) details   _metadata  gtxid ltxid (optional) msg   (response data)  Common Convention Do &amp;amp; Don&amp;rsquo;t  Avoid using plain text response (use JSON or XML)  Action Plan Request</description>
    </item>
    
    <item>
      <title>Docker Swarm Study</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-08-18-093029-docker-swarm-study/</link>
      <pubDate>Thu, 18 Aug 2016 09:30:29 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-08-18-093029-docker-swarm-study/</guid>
      <description>Introduction 동기 이제 슬슬 시스템에 서비스들이 많아지면서 Orchestration을 신경써야 할 필요성이 대두되었다.
supervisor 등의 툴을 사용해서 관리하고 있었지만 sigterm을 맞고도 바로 죽지 않는 컨테이너가 있는 등 문제가 다소 있었고, 이것을 dockerfile 에서 해결하거나 entrypoint 를 스크립트로 잡고 인위적으로 내부의 pid를 관리해야 하는것이 부자연스럽다고 생각하던 차였다.
Container Orchestration Tools Container를 Orchestration 해주는 툴들은 근래에 와서 많이 늘어났다.
8 Container Orchestration Tools to Know 를 보면 주요한 툴들을 잘 설명 해놨다.
요약하자면</description>
    </item>
    
    <item>
      <title>Expand linux guest&#39;s vdi size on linux host</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-08-17-111838-expand-vdi-size/</link>
      <pubDate>Wed, 17 Aug 2016 11:18:38 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-08-17-111838-expand-vdi-size/</guid>
      <description>동기 처음에 정해진 사이즈 내에서는 vdi의 사이즈가 자동으로 늘어나지만 (기본설정이라면) 그게 넘어가 버리면 용량을 늘리기가 생각보다 귀찮았다. 검색해보니 vdi 를 클로닝 하는 방법이랑 vboxmanage 명령어로 늘리는 방법 두가지가 존재했다. 난 이중에서 명령어를 사용해서 늘리는 식으로 했다.
방법  우선 VM을 shutdown 해서 끈다. VM 파일이 있는 경로로 이동해서 vdi 파일을 찾는다. vboxmanage modifyhd roconsim-ansible.vdi --resize 30000 식으로 vdi의 사이즈를 바꿔준다. 에러메세지 없이 끝나면 잘 된것이다.  resize 옵션 뒤에 붙는 숫자는 MB 단위로 새로운 크기이다.</description>
    </item>
    
    <item>
      <title>Angular2 rc5</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-08-11-173123-angular2-rc5-study/</link>
      <pubDate>Thu, 11 Aug 2016 17:31:23 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-08-11-173123-angular2-rc5-study/</guid>
      <description>동기 Angular2 rc4가 나왔을때 라우터가 갈려나가는것을 보고 아 이제 좀 고만 고치겠구나 라고 생각했고 이제 슬슬 본격적으로 공부를 해볼까 생각하고 있었는데 얼마안있어 나온 rc5에서 모듈개념이 본격적으로 도입되면서 또 엄청나게 갈려나갔다.
같은 튜토리얼만 지금 몇번째 보는건지모르겠는데 ㅋㅋ 약간 방향을 바꾸어서 변경된 중요포인트를 확인하고 yeoman 과 같은 보일러플레이트를 활용해서 빠르고 아름답게 초기 환경 설정을 하고 간단한 예제를 만드는것을 목표로 공부를 해 보도록 하겠다.
부가목표 foundation Bootstrap 레이아웃이 난 맘에 별로 안들었다. 대충 만들기엔 정말 쉽고 편하고 좋은데 너무 정형화 되어있다는 느낌을 받았음.</description>
    </item>
    
    <item>
      <title>survey of service discovery in MSA</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-08-11-165835-survey-of-service-discovery/</link>
      <pubDate>Thu, 11 Aug 2016 16:58:35 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-08-11-165835-survey-of-service-discovery/</guid>
      <description>Service Discovery 의 개념 설명  https://dzone.com/articles/service-discovery-in-a-microservices-architecture http://microservices.io/patterns/client-side-discovery.html http://www.mammatustech.com/Microservice-Service-Discovery-with-Consul  주요 프로젝트 Jason Wilder&amp;rsquo;s blog 에서 여러가지를 간단하게 정리 해 놓았다.
 https://github.com/Netflix/eureka https://www.consul.io/ https://github.com/coreos/etcd NginX  https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/ https://www.nginx.com/blog/service-discovery-nginx-plus-zookeeper/   zookeeper  http://blog.arungupta.me/zookeeper-microservice-registration-discovery/ https://tech.knewton.com/blog/2014/12/eureka-shouldnt-use-zookeeper-service-discovery/   https://github.com/coreos/etcd  </description>
    </item>
    
    <item>
      <title>Javascript Documentation</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-07-20-09-51-javascript-documentation/</link>
      <pubDate>Wed, 20 Jul 2016 09:51:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-07-20-09-51-javascript-documentation/</guid>
      <description>2016년 가장 널리 사용되는 javascript documentation 은 jsdoc이다.
 http://usejsdoc.org/ https://github.com/jsdoc3/jsdoc https://meteor.hackpad.com/Automatically-Generating-API-Docs-using-JSDoc-EpPmd2iuFEH#:h=Example:-Class  랜더링 툴은
 https://www.npmjs.com/package/jsdoc-to-markdown https://github.com/docstrap/docstrap https://github.com/DBCDK/jsdoc3Template https://github.com/clenemt/docdash https://github.com/kbknapp/clap-rs http://jaguarjs.com/doc/  doc dash가 젤 이뻐보인다.</description>
    </item>
    
    <item>
      <title>Javascript Promise</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-07-13-08-bluebird-promise/</link>
      <pubDate>Wed, 13 Jul 2016 08:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-07-13-08-bluebird-promise/</guid>
      <description>문제 Statistics API를 구현하던 도중 여러개의 RESTful API request 들을 하나로 aggregation 해서 리턴을 할 일이 생겼다.
기술선택 깔끔하게 구현할 수 있는 방법이 없을까 고민하던중에 promise 가 제공하는 .all 기능이 적합하다고 생각했고, Javascript에서 promise 제공 라이브러리가 여러가지 있다고 정도로만 알고 있었기에 본격적으로 서베이를 시작했다.
관심사는 유명한 q, promise A+, bluebird 세가지였다.
빌트인 구현은 브라우저에서 uncaught error를 silent 처리 해버리기 때문에 디버깅이 어렵다고 하여 제외하기로 하였다. (라이브러리를 사용해도 스펙 자체는 표준에 가깝기 때문에 대부분의 구현들이 compatible 하다.</description>
    </item>
    
    <item>
      <title>The best practice of builing angular 1.x project</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-07-06-angular1.5-survey-best-practice/</link>
      <pubDate>Wed, 06 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-07-06-angular1.5-survey-best-practice/</guid>
      <description>node project 를 시작하기 위해 Megaboiler Plate를 사용해 보긴 했는데
나에겐 필요없는 군더더기가 너무 많아서 문제가 좀 있다.
우리에게 필요한건 api interface 이기 때문에 웹 서버위에 쓰기편한 라우터 정도만 올라가 있으면 충분하다.</description>
    </item>
    
    <item>
      <title>make swagger-ui support multiple specs file</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-06-21-14-46-multiple-specs-swagger-ui/</link>
      <pubDate>Tue, 21 Jun 2016 14:46:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-06-21-14-46-multiple-specs-swagger-ui/</guid>
      <description>codegen 으로 생성되는 웹서버는 커스터마이징 하는데 한계가 있기 때문에 swagger-ui를 하나 돌리고 여기서 로드해서 보여주는 파일들을 외부파일을 링크하는 방식으로 사용하기로 하였다.
서버에서는 Apache 의 VirtualHost 기능을 이용해서 .json 이나 .yaml 을 static 하게 서브하도록 설정해 놓았다.
 https://github.com/swagger-api/swagger-ui/issues/1069 https://github.com/swagger-api/swagger-ui/issues/1363 https://gist.github.com/webron/7c41db7f777471fcbc10  의 순서로 제법 괜찮아보이는 해결방법을 찾았다.
이부분만 고쳐주면 되기 때문에 나중에 스펙파일들의 리스트가 있으면 index.html 파일을 빌드타임에 컴파일해서 쓸수도 있을것이다.</description>
    </item>
    
    <item>
      <title>make my npm module</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-06-21-09-54-make-my-npm-module/</link>
      <pubDate>Tue, 21 Jun 2016 09:54:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-06-21-09-54-make-my-npm-module/</guid>
      <description>기존에 도커 data volume 의 default configuration을 file에 저장하는 용도로 사용했던 코드 조각이 있었는데 이게 여기저기서 사용이 되기 시작해서 유지보수 비용이 증가하게 되었고 때문에 모듈화를 해야겠다고 생각이 되었다.
사실 configuration을 도와주는 라이브러리는 있지만 사용상 추구하는 바가 다소 다르기 때문에 커스터마이징을 안할수 없는 상황이어서 (조회가 안되면 디폴트값을 다시 조회하여 error tolerant 를 확보하는 등&amp;hellip;) 그냥 새로운 모듈을 만들어서 관리하기 하였다.
어떻게 node module 을 만드는것이 가장 이쁜 방법인지 잘 모르기 때문에 유명한 라이브러리의 소스코드나 세팅 구조를 참고하기로 하였다.</description>
    </item>
    
    <item>
      <title>Jenkins2 create pipeline job</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-06-14-1420-jenkins2-make-a-job/</link>
      <pubDate>Tue, 14 Jun 2016 14:20:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-06-14-1420-jenkins2-make-a-job/</guid>
      <description>환경 jenkins server : ubuntu 12.04
jenkins : v2.8
작업환경 : ubuntu 14.04
사족 freestyle job 은 마우스 클릭만 할 줄 알면 기본적인 빌드를 만들 수 있기 때문에 정리가 무색한것 같아서 다음으로 미루도록 하겠다.
동기 단계가 복잡하거나 하는 일이 많은 job 의 경우 pipeline job 으로 만드는것이 좋은것 같다.
jenkins2 부터는 설치시에 추천 플러그인으로 설치를 해 준다.
https://github.com/jenkinsci/pipeline-plugin/blob/master/TUTORIAL.md
여기를 시작으로 해보도록 하겠다.
목표 내가 필요한것은
 git repository로 부터 코드 받기 swagger-codegen 으로 webserver 생성하기 (kind of build) docker image 로 빌드하기 서버에서 이미 돌고 있는 컨테이너 내리기 서버에 이미지를 밀어넣거나 그쪽에서 pull 받아서 실행시키기</description>
    </item>
    
    <item>
      <title>Jenkins2 설치 및 구성 (docker)</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-06-14-1000-jenkins2-setup/</link>
      <pubDate>Tue, 14 Jun 2016 10:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-06-14-1000-jenkins2-setup/</guid>
      <description>설치 Jenkins2 를 설치한다 docker 이미지를 제공하니까 이걸 쓰도록 한다.
20160614 현재 최신버전은 2.8
https://hub.docker.com/r/jenkinsci/jenkins/tags/
sudo docker run \ -p 13980:8080 \ -d \ jenkinsci/jenkins 로 실행
컨테이너의 8080 포트를 13980으로 바인드 한다.
초기 설정 http://my-ip:13980 로 접속하면
/var/jenkins_home/secrets/initialAdminPassword 으로 들어가서
초기 비밀번호를 입력하라는 화면을 보게 된다.
도커의 shell 에 붙어서 파일을 읽으면 된다.
sudo docker exec -ti containdername bash 로 쉘에 붙자
cat /var/jenkins_home/secrets/initialAdminPassword 으로 확인할 수 있다.
다음은 이런 화면인데 Install suggested plugins 를 선택하면 된다</description>
    </item>
    
    <item>
      <title>webstorm에서 node관련 함수들을 찾을수 없다고 나올때 해결법</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-05-25-webstorm-node-integration/</link>
      <pubDate>Wed, 25 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-05-25-webstorm-node-integration/</guid>
      <description>Webstorm에서 node등을 지원한다고 하는데 빨간줄이 죽죽 그어져있는 모습이 보이곤한다.
설정을 좀 해줘야한다.
설정으로 가서
Language &amp;amp; Frameworks &amp;gt; Node.js and NPM 으로가서
Code Assistance 를 Enable 해주면 된다.</description>
    </item>
    
    <item>
      <title>python 프로젝트에 virtualenv 적용하고 사용하기</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-05-24-python-virtualenv/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-05-24-python-virtualenv/</guid>
      <description>What is the virtualenv 프로젝트의 의존성 관리를 할 때 nodejs 의 경우 nasty dependency 라서 디렉토리 독립적으로 운용 가능하지만 파이선은 라이브러리가 시스템에 설치되기 때문에 디펜던시의 버전관리가 어려운 문제가 있으며 복수의 서로 다른 디펜던시를 가진 프로젝트를 운용하는데도 문제가 있다. 이를 해결하기 위한 방법으로 virtualenv 라는 파이선 패키지가 제공되고 있고 이를 사용하는 방법에 대해서 알아보겠다.
Installation sudo pip install virtualenv sudo -H pip install virtualenv
virtual environment 모드로 변경 virtualenv dependency: virtual enviroment 생성, dependency 디렉토리가 생김 .</description>
    </item>
    
    <item>
      <title>actionhero로 API Gateway 구축하기</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-05-17-actionhero-api-gateway-worklog/</link>
      <pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-05-17-actionhero-api-gateway-worklog/</guid>
      <description>서론 라이선스 문제 때문에 LoopBack이 거슬려서 찾아보니 Action Hero 라는걸 찾았다.
http://www.actionherojs.com/
일단 기본적으로 나에게 필요한 기능은 다 있는것처럼 보인다.
 Reusability Scalability(Clustering) RestfulAPI  얘는 독특하게 Web, WebSocket 뿐만 아니라 Socket 도 지원을 한다.
npm install actionhero ./node_modules/.bin/actionhero generate npm install npm start 이렇게 설치하고 초기화하고 시작할 수 있다.</description>
    </item>
    
    <item>
      <title>loopback으로 API Gateway 구축하기</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-05-16-loopback-api-gateway-worklog/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-05-16-loopback-api-gateway-worklog/</guid>
      <description>서론 Micro Service Architecture 에 대해서는 다음 링크에 조대협님이 쉽게 잘 설명해주셨다.
조대협의 블로그 - 마이크로 서비스 아키텍쳐 (MSA의 이해)
이번 포스팅에서는 Loopback을 사용할것이다.
Loopback 은 IBM의 자회사인 StrongLoop가 만든 API Gateway 미들웨어이다
Loopback.io 에서 문서들과 예제들을 확인 할 수 있다.
설치와 초기 세팅 sudo npm install -g strongloop 설치가 끝나면 프로젝트 디렉토리를 하나 만들고 slc loopback 명령어로 프로젝트를 생성한다.
mkdir project-name cd project-name slc loopback 그러면 yeoman이 트리거되고 설치가 시작된다.</description>
    </item>
    
    <item>
      <title>실수로 한 apt-get autoremove 수습하기</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-05-10-covering-autoremove-mistake/</link>
      <pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-05-10-covering-autoremove-mistake/</guid>
      <description>python3.5 를 설치하다가 3.4를 삭제한 상태에서 실수로 autoremove 를 하여 python3.4 와 의존성을 가지던 패키지들이 다 날아가서 네트워크도 안되고 난장판이었다.
재부팅하니 GUI도 쓸수 없었다.
network 복구 ctrl+alt+F1 으로 터미널1에 붙어서 작업을 한다.
sudo vi /etc/network/interfaces 에 다가 네트워크 정보를 박아주고 ifconfig 나 iwconfig등으로 네트워크를 수동으로 잡아주거나 해서 네트워크를 연결시킨다.
손실된 패키지 솎아내서 복구 일단 apt-get 의 로그를 찾아야겠다 뭔가 아주 많이 지워졌는데 어디부터 날아갔는지 피해산정이 중요하다.
vi /var/log/dpkg.log | less 에 내용을 보면</description>
    </item>
    
    <item>
      <title>Python Flask 로 RestfulAPI 서버 만들기</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-05-09-building-flask-api-server-log/</link>
      <pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-05-09-building-flask-api-server-log/</guid>
      <description>목표 목표는 RestfulAPI 서버를 만드는것이다.
요구조건은, WebSocket 을 구현해야 할 수도 있다는 점이고.
단발성의 API콜이 비주기적으로 많이 들어올수 있다는것.
되도록이면 Response Time 은 짧은것이 좋다는것.
Redis 를 캐시로 써서 리턴한다는점이다.
시작 난 잘 만들어진 보일러플레이트로 시작을 하는것이 좋겠다.
https://github.com/vovantics/flask-bluebone
문서화가 잘 되어있고 authentication 도 구현되어있다.
메인테이너가 한명이고 이슈란에 아무것도 없다는게 마음에 좀 걸리는데 리드미에 이렇게 구현한 이유에 대해서 나름대로 설명을 달아놨기 때문에 공부하기에는 좋아보인다.
이메일이라던지 스테틱파일 서브와 같은 이번 목적이랑 상관없는것들도 포함되어있는데 걷어내면 되니까 일단은 신경쓰지 않는다.</description>
    </item>
    
    <item>
      <title>Python WebServer Survey for API Server</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-05-09-python-web-platform-survey/</link>
      <pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-05-09-python-web-platform-survey/</guid>
      <description>Restful API 서버를 구현해야 할 문제가 있다.
요구조건은 다음과 같다.
 Restful API가 구현 가능해야한다. WebSocket 구현이 용이해야 한다. Scalability 가 좋으면 더욱좋다. Response time 이 짧으면 좋다. Python 이면 좋다.  Flask 사용자가 많아서 커뮤니티 서포트가 좋지만 달려있는게 많기 때문에 상대적으로 아주 무겁고 response time이 상당히 길다는 문제가 있다. 플랫폼을 meinheld 로 바꾸고 나서 많이 빨라졌다. plain text serve 의 경우 아예 퍼포먼스가 좀 느리가 느리다 nodejs 에 비해 7배정도 차이가 있음.</description>
    </item>
    
    <item>
      <title>Noizbuster Logo Design</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-04-30-noizbuster-logo-design/</link>
      <pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-04-30-noizbuster-logo-design/</guid>
      <description>로고 사이즈를 정하는데 보통 가이드라인들은 300px 로 한다
아이콘으로는 구글 플레이에서 요구하는 가장큰 아이콘은 512*512
안드로이드 아이콘 사이즈는 48 px, 72 px, 96 px, 144 px, 192 px
로고 사이즈는 300x300 에 가로나 세로를 맞춰서
다른 사이즈로는 150px, 96px, 64px, 32px, 16px로 만들면 된다.
reference</description>
    </item>
    
    <item>
      <title>Stemcell 기획</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-04-28-stemcell/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-04-28-stemcell/</guid>
      <description>동기 jekyll을 비롯하여 StaticGen을 이용하여 블로그나 웹페이지를 빌드해주는 엔진들을 사용해 보았는데, 맘에 안드는것이 좀 있었다.
 front matter 로 사용하는것들이 일관성이 없을뿐더러 .md 파일 자체만 preview 하는경우에 전혀 본문의 일부처럼 보이지 않는다. Static Page 를 빌드하고 나서의 상대 이미지의 경로 문제  front matter 의 경우 그나마 중간에 개행을 추가한 yml 포멧은 md 를 html로 컴파일 했을때 보기에 좀 나아서 사용하고 있지만. 이것역시 다른 엔진이나 테마로 넘어가기엔 호환성이 떨어진다는 문제가 있다(모든 파일을 다시 수정해야한다는 이야기).</description>
    </item>
    
    <item>
      <title>Converting .OVA to docker image</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-04-20-ova-to-dockerimg/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-04-20-ova-to-dockerimg/</guid>
      <description>0.서론 도커 이미지를 만드는것은 그리 어렵지 않았다.
근데 지금 쓰고있는 VM을 docker image 로 바꿔서 실행하면
서버나 시뮬레이터를 좀 더 편하게 만들고 실행할때는 속도가 더 빠를것이라고 기대했다.
VM 툴들은 스냅샷도 지원하니까 버전관리도 할 수 있다.
물론 도커 이미지를 다른 이미지를 베이스로 하여 올리는것보다는 빌드에 시간도 많이 걸리고
실행시에 엔트리 포인트도 정해 줘야 할 것 같은 불길한 예감이 들지만
뭐 어떠한가! 빠른데!
1. Extracting .vmdk from VM (.OVA) 우선 Virtual machine to docker image 따위의 키워드로 구글링 해보니</description>
    </item>
    
    <item>
      <title>css 넘치는 text 줄임말로 처리하기</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-04-12-handling-text-overflow-in-responsivedesign/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-04-12-handling-text-overflow-in-responsivedesign/</guid>
      <description>문제 div 나 span 내부에 있는 텍스트들이 너무 길어서 칸 밖으로 나갈때 잘라내거나 ... 등으로 줄임표시 하고 싶은 경우가 있다.
responsive 하게 디자인되지 않은 경우에는 대게 width가 px로 정의되기 때문에 text-overflow 옵션을 조정하여 해결할할 수 있으나.
엘리먼트의 크기가 percentage 와 같이 상대적인 크기로 정의되어있을때는 제대로 동작하지 않는다는 문제가 있다.
시도해본것 p { white-space: nowrap; width: 100%; overflow: hidden; /* &amp;#34;overflow&amp;#34; value must be different from &amp;#34;visible&amp;#34; */ text-overflow: ellipsis; } float:left; 해결방법 .</description>
    </item>
    
    <item>
      <title>Commonmark의 방향에 대한 사견</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-04-04-commonmarks-direction/</link>
      <pubDate>Mon, 04 Apr 2016 13:17:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-04-04-commonmarks-direction/</guid>
      <description>markdown 의 variation이 난립함에 따라 표준화에 대한 요구가 떠올랐고
John Gruber 와 커뮤니케이션을 거쳐 (다소 시끌했지만) commonmark 가 총대를 매고 나타났다.
현재까지 스펙이 0.25 버전까지 올라왔고 업데이트 주기도 길어지고 있다. 하지만 table 이나 code highlight 에 관한 이야기가 아주 활발히 일어나고 있음에도 불구하고 스펙에 들어갈 기미는 보이지 않는다. 다만 extended 기능으로 추가해서 쓰는게 어떠하냐는 이야기뿐.
나 역시 너무 많은 기능이 commonmark에 포함되어 진입장벽을 높이거나 하는것엔 동의하지 않지만 github flavor의 table 이나 code highlight support 같은경우엔 매우 직관적이며 진입장벽을 높이지 않는다고 생각한다.</description>
    </item>
    
    <item>
      <title>똑똑하게 서버사이드 폴링 하기</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-04-04-serverside-polling/</link>
      <pubDate>Mon, 04 Apr 2016 10:54:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-04-04-serverside-polling/</guid>
      <description>Comet과 LongPolling 웹에서 데이터를 폴링하기 위한 개념으로 comet 이라는 모델이 제시되어있다.
이것을 구현하는 방법중 하나가 롱 폴링이다.
 comet 에 대한 설명 https://en.wikipedia.org/wiki/Comet_(programming)
한글로 된 간략한 설명
http://egloos.zum.com/genes1s/v/2699984
 요약하자면 단발성으로 http request 를 하는것이 아니라 connection을 물고 있다가
이벤트가 발생하면 응답하여 반응성을 높이는것이다.
pro : 응답성이 빠르다
con : 커넥션을 쥐고 있어야 하기 때문에 자원이 많이 든다.
폴링주기가 제법 길다 &amp;ndash;&amp;gt; 그냥 주기적으로 http request
폴링주기가 아주 짧다 &amp;ndash;&amp;gt; comet, longpolling 사용</description>
    </item>
    
    <item>
      <title>Jekyll 설치 </title>
      <link>https://blog.noizbuster.com/ko/posts/2016-03-18-install-jekyll/</link>
      <pubDate>Fri, 18 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-03-18-install-jekyll/</guid>
      <description>Installation Install ruby2.3 on ubuntu
sudo apt-add-repository ppa:brightbox/ruby-ng sudo apt-get update sudo apt-get install ruby2.3 ruby2.3-dev Install gem
sudo apt-get install gem
Update gem
sudo gem install rubygems-update
Install Jekyll
sudo gem install jekyll
Check jekyll version
jekyll --version</description>
    </item>
    
    <item>
      <title>Jekyll설치 가이드</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-01-18-jekyll-installation/</link>
      <pubDate>Fri, 18 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-01-18-jekyll-installation/</guid>
      <description>install jekyll install ruby2.3 ubuntu
sudo apt-add-repository ppa:brightbox/ruby-ng sudo apt-get update sudo apt-get install ruby2.3 ruby2.3-dev install gem
sudo apt-get install gem
update gem
sudo gem install rubygems-update
install Jekyll
sudo gem install jekyll
check jekyll version
jekyll --version</description>
    </item>
    
    <item>
      <title>celery with mongodb</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-01-18-celery-with-mongodb/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-01-18-celery-with-mongodb/</guid>
      <description>#Celery 와 Mongo DB를 이용한 튜토리얼
참고링크
http://skillachie.com/2013/06/15/intro-celery-and-mongodb/
 install celery
pip install celery
pip install -U &#39;celery[mongodb]&#39;or pip install -U celery-with-mongodb
아래와 같은 형식으로 나중에 브로커를 등록 하면 됨.  BROKER_URL = &amp;#39;mongodb://localhost:27017/database_name&amp;#39; #Where the URL is in the format of: mongodb://userid:password@hostname:port/database_name use test db.createUser( {use: &amp;#34;testUser&amp;#34;, pwd: &amp;#34;test&amp;#34;, roles: [&amp;#34;readWrite&amp;#34;, &amp;#34;dbAdmin&amp;#34;] } ) #다음 명령은 read 권한만 갖고 있는 동일한 사용자를 admin 데이터베이스에 추가하고 testDB2 데이터베이스에 대한 readWrite 권한을 부여한다.</description>
    </item>
    
    <item>
      <title>js calendar-componenets-survey</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-01-18-js-calendar-components-survey/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-01-18-js-calendar-components-survey/</guid>
      <description>#Schedule Viewer
Ubuntu 14.04
MEAN Stack (with Angular2.0)
JobQueue : Celery(python) with MongoDB(Broker)
(Optional) Vagrant
Visualization
 graspSchedule.js
 DOJO
[DOJO] (http://dojotoolkit.org/reference-guide/1.10/dojox/calendar.html)
Demo fullcalandar
Demo  uikit
 UIKIT Bootstrap  data visualization
 http://www.chartjs.org/ http://d3js.org/ http://sigmajs.org/ http://visjs.org/ https://plot.ly/javascript  </description>
    </item>
    
    <item>
      <title>react-vs-angular2</title>
      <link>https://blog.noizbuster.com/ko/posts/2016-01-18-react-vs-angular2/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.noizbuster.com/ko/posts/2016-01-18-react-vs-angular2/</guid>
      <description>#MEAN VS MERN ###AngularJS 2.0 VS ReactJS
###Contents
 AngularJS 2.0 React Conclusion Workload Estimate Links   AngularJS 1.3 는 논외로 하기로 함
http://netil.github.io/slides/angularjs/index3.html#/
 앞으로 메인테넌스를 2년 미만만 지원됨. AngularJS 2.0으로의 마이그레이션 방법 없음 React 보다 7배정도 느림 &amp;ndash;&amp;gt; 2.0 에서 개선 소스코드의 재활용이 react에 비해서 떨어진다. &amp;ndash;&amp;gt; 2.0 에서 개선 watcher가 많아지면 퍼포먼스 하락     angular2.0 VS react     two way data binding one way   ES6 완벽지원 JS ES6일부지원     ###AngularJS 2.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on My New Hugo Site</title>
    <link>http://example.org/tags/javascript/</link>
    <description>Recent content in Javascript on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Jul 2016 09:51:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javascript Documentation</title>
      <link>http://example.org/posts/2016-07-20-09-51-javascript-documentation/2016-07-20-09-51-javascript-documentation/</link>
      <pubDate>Wed, 20 Jul 2016 09:51:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2016-07-20-09-51-javascript-documentation/2016-07-20-09-51-javascript-documentation/</guid>
      <description>2016년 가장 널리 사용되는 javascript documentation 은 jsdoc이다. * http://usejsdoc.org/ * https://github.com/jsdoc3/jsdoc * https://meteor.hackpad.com/Automatically-Generating-API-Docs-using-JSDoc-EpPmd2iuFEH#:h=Example:-Class
랜더링 툴은
 https://www.npmjs.com/package/jsdoc-to-markdown https://github.com/docstrap/docstrap https://github.com/DBCDK/jsdoc3Template https://github.com/clenemt/docdash https://github.com/kbknapp/clap-rs http://jaguarjs.com/doc/  doc dash가 젤 이뻐보인다.</description>
    </item>
    
    <item>
      <title>Javascript Promise</title>
      <link>http://example.org/posts/2016-07-13-08-bluebird-promise/2016-07-13-08-bluebird-promise/</link>
      <pubDate>Wed, 13 Jul 2016 08:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2016-07-13-08-bluebird-promise/2016-07-13-08-bluebird-promise/</guid>
      <description>문제 Statistics API를 구현하던 도중 여러개의 RESTful API request 들을 하나로 aggregation 해서 리턴을 할 일이 생겼다.
기술선택 깔끔하게 구현할 수 있는 방법이 없을까 고민하던중에 promise 가 제공하는 .all 기능이 적합하다고 생각했고, Javascript에서 promise 제공 라이브러리가 여러가지 있다고 정도로만 알고 있었기에 본격적으로 서베이를 시작했다.
관심사는 유명한 q, promise A+, bluebird 세가지였다.
빌트인 구현은 브라우저에서 uncaught error를 silent 처리 해버리기 때문에 디버깅이 어렵다고 하여 제외하기로 하였다. (라이브러리를 사용해도 스펙 자체는 표준에 가깝기 때문에 대부분의 구현들이 compatible 하다.</description>
    </item>
    
  </channel>
</rss>